// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CUSTOMER
}

model Users {
  id               String     @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String?    @unique
  emailVerified    DateTime?
  createdAt        DateTime   @default(now())
  image            String?
  password         String?
  twoFactorEnabled Boolean    @default(false)
  role             Role
  customerId       String?
  Accounts         Accounts[]
  Session          Session[]
  Reviews          Reviews[]
  Orders           Orders[]
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         Users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  category      String
  type          String
  image         String
  price         Int
  description   String
  reviews       Reviews[]
  createdAt     DateTime        @default(now())
  itemCount     Int             @default(1)
  OrderProducts OrderProducts[]
}

model Reviews {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  product   Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId
  userId    String?  @db.ObjectId
  name      String?
  rating    Int
  comment   String
  createdAt DateTime @default(now())

  user Users? @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Accounts {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model EmailTokens {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  token   String
  expires DateTime
  email   String
}

model PasswordResetTokens {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  token   String
  expires DateTime
  email   String
}

model TwoFactorTokens {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  token   String
  expires DateTime
  email   String
  userId  String?  @db.ObjectId
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Orders {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  userId          String          @db.ObjectId
  total           Int
  status          String
  createdAt       DateTime        @default(now())
  receiptUrl      String?
  paymentIntentId String
  orderProducts   OrderProducts[]

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OrderProducts {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  quantity  Int
  product   Product @relation(fields: [productId], references: [id])
  order     Orders  @relation(fields: [ordersId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
  ordersId  String  @db.ObjectId
}
